struct Solution;

impl Solution {
    pub fn three_sum_closest_slow(nums: Vec<i32>, target: i32) -> i32 {
        let mut nums_sorted = nums.clone();
        nums_sorted.sort();

        let len = nums_sorted.len();
        let mut best_dist = i32::MAX;
        let mut sum;
        let mut best_sum = i32::MIN;
        let mut dist;
        let mut ijk = (0,0,0);

        for i in 0..len-2 {
            for j in i+1..len-1 {
                for k in j+1..len {
                    sum = nums_sorted[i] + nums_sorted[j] + nums_sorted[k];
                    dist = (target - sum).abs();
                    if dist < best_dist {
                        best_dist = dist;
                        best_sum = sum;
                        ijk = (i,j,k);
                    }
                }
            }
        }
        let (i, j, k) = ijk;
        println!("{:?}: {} {} {}", ijk, nums_sorted[i], nums_sorted[j], nums_sorted[k]);
        best_sum
    }
}

impl Solution {
    pub fn three_sum_closest_fast(nums: Vec<i32>, target: i32) -> i32 {
        let len = nums.len();
        if len == 3 {return nums[0] + nums[1] + nums[2]}

        let mut best_dist = i32::MAX;
        let mut best_sum = i32::MIN;
        let mut nums = nums;
        nums.sort();

        for i in 0..len-2 {
            let mut j = i+1;
            let mut k = len-1;

            while j < k {
                let sum = nums[i] + nums[j] + nums[k];
                let dist = target - sum;
                println!("{:?} {} {} {}, {} {} {} {}", nums, i, j, k, nums[i], nums[j], nums[k], sum);
                println!("{} {} dist:{} best_dist:{}", sum, best_sum, dist, best_dist);

                // check improved
                if dist.abs() < best_dist {
                    println!("better");
                    best_dist = dist.abs();
                    best_sum = sum;
                }

                // move indecies
                if dist > 0 {
                    j += 1;
                }
                else if dist < 0 {
                    k -= 1;
                }
                else {
                    return sum;
                }
            }
        }
        best_sum
    }
}

impl Solution {
    pub fn three_sum_closest(nums: Vec<i32>, target: i32) -> i32 {
        let mut nums_sorted = nums.clone();
        nums_sorted.sort();

        let len = nums.len();
        let mut best_dist = i32::MAX;
        let mut best_sum = i32::MIN;
        let mut dist;
        let mut sum;

        for i in 0..len-2 {
            let mut k = len-1;
            for j in i+1..len-1 {
                let mut local_best_dist = i32::MAX;
                let mut local_best_sum = i32::MIN;
                if k < j+1 {k = j+1}
                loop {
                    if k > len-1 {
                        k = len-1;
                        break;
                    }
                    if k < j+1 {break;}

                    sum = nums_sorted[i] + nums_sorted[j] + nums_sorted[k];
                    dist = (target - sum).abs();
                    if dist < local_best_dist {
                        local_best_dist = dist;
                        local_best_sum = sum;
                    }
                    else {break;}
                    
                    if target - sum > 0 {k += 1;} else {k -= 1;}
                }
                if local_best_dist < best_dist {
                    best_sum = local_best_sum;
                    best_dist = local_best_dist;
                }
            }
        }
        best_sum
    }
}

fn main() {
    println!("{}", Solution::three_sum_closest(vec!(1,2,3,4,5), 2));
}

#[cfg(test)]
pub mod test {
    use super::*;

    #[test]
    fn test1() {
        assert_eq!(Solution::three_sum_closest_fast(vec!(-1,2,1,-4), 1),  2);
    }

    #[test]
    fn test2() {
        assert_eq!(Solution::three_sum_closest_fast(vec!(0,0,0), 1),  0);
    }

    // #[test]
    // fn test3() {
    //     let vector = vec!(
    //         58,241,-354,103,430,-113,707,951,-817,372,369,-610,505,-411,871,101,925,899,-704,411,437,996,525,-845,-510,235,-105,590,403,-777,-727,625,501,242,-763,478,-400,-214,-245,-609,-304,-818,-462,416,853,564,-151,-750,383,702,480,132,-278,-82,-696,728,-559,148,-676,535,-888,-22,839,641,-341,-766,126,-954,-986,776,887,941,228,-83,-363,-131,-944,813,-652,960,-640,-937,-297,219,973,838,-247,337,83,-212,966,470,-321,247,-69,-375,273,883,607,-412,65,436,-221,-114,-754,704,-910,-157,499,591,-10,-20,-384,-534,-378,997,360,-762,-98,313,-580,-656,-651,377,-397,-689,467,204,862,-274,630,555,298,174,75,939,-59,745,67,-132,-529,-338,427,-263,-821,-548,-483,-512,-26,-398,-175,315,567,872,516,-604,192,730,-847,664,-564,-381,-745,-641,-76,-195,657,37,-258,733,272,-29,216,698,-616,982,365,534,16,55,-913,-605,-119,627,-775,-391,-65,716,341,884,122,426,-982,230,468,-791,-916,-68,231,857,-593,-973,-447,-880,486,-835,-715,622,-268,680,220,-104,629,-664,-903,869,663,115,945,-314,134,852,-575,602,-925,309,71,727,-877,-323,-31,325,737,-500,-322,545,511,138,-837,-225,11,-155,-246,-335,-975,-337,185,-152,-701,173,-79,-405,-455,814,-844,-976,905,508,-439,886,483,-826,935,-187,-8,946,-78,-357,835,-201,-886,-181,633,975,-864,576,-535,-527,-479,858,670,-985,-150,20,-677,-647,233,-612,512,465,-310,570,190,32,-280,476,-386,953,877,705,-646,370,407,-349,700,-884,-497,30,-789,890,-769,-87,-352,-111,-897,-596,-230,64,-476,-895,340,527,-244,-924,642,-581,-546,800,573,510,7,-449,740,-136,-209,684,503,-37,-369,-243,129,184,-885,615,720,569,-173,-861,317,-943,-413,620,-301,-127,-276,270,550,-392,-645,-520,191,6,-199,57,903,91,-674,-503,-608,481,392,201,211,-484,469,594,865,-493,-830,73,186,-270,-733,963,-366,-744,-875,-380,840,929,-782,51,-236,-557,-787,-773,274,-956,-432,93,-491,694,307,-117,168,-959,-239,-100,-960,513,-554,-217,-853,-253,-783,-525,-933,597,915,672,-815,-422,15,119,-873,355,-417,524,529,-128,-568,413,24,-995,-34,-16,665,977,-488,-227,-300,135,-556,958,124,-856,732,48,611,153,422,-809,-347,-642,806,926,502,-923,-591,33,-452,239,414,-250,-860,-620,179,-732,-401,-81,-7,442,-229,851,-249,41,423,896,986,-538,141,-804,553,-305,-425,113,754,558,23,864,495,266,294,408,817,-561,-435,-957,246,-614,-379,-859,626,-148,-823,157,-626,425,-519,653,542,-811,158,-606,197,250,759,35,229,-539,-920,-607,-558,-685,-654,770,-962,-942,-112,974,348,-908,471,-324,-904,552,518,795,609,-990,-781,395,-92,794,821,-86,-440,-107,-431,631,-714,619,546,-749,-881,-343,-130,251,-849,31,351,-188,-419,-407,-662,-256,-760,559,-870,781,-862,42,114,-879,-839,708,-220,916,-526,-252,-764,923,405,-61,-751,143,-499,914,-182,-317,971,78,-118,38,375,-989,-388,-480,384,891,-40,300,209,989,729,-915,-145,-25,-792,-382,824,544,-905,362,-578,964,446,815,402,-312,-350,-58,-978,575,379,662,-293,-688,328,-416,1000,-731,-237,736,-848,539,-983,-5,441,-663,724,-251,-583,922,378,-228,532,194,-472,336,638,942,-528,195,-788,-757,-326,-272,574,-778,718,-963,-73,-174,603,-475,353,-793,-753,128,-158,568,-333,893,293,-50,-711,350,957,-200,389,757,330,-141,780,650,-6,-767,-824,107,-882,-698,-998,-636,-974,-106,-84,-281,669,-42,-121,-725,-345,-863,261,240,696,-428,-724,118,-1,269,473,985,187,-988,-883,-532,-303,-502,181,-517,288,832,-728,-633,616,-643,-33,373,387,981,260,752,-705,109,-21,-690,334,-638,415,-595,-673,-444,-660,673,-404,80,-573,731,311,343,424,722,976,189,885,-909,-737,404,-765,299,940,-441,310,-437,-160,-639,855,489,819,-142,177,651,281,-468,398,528,-460,374,-508,-570,-511,654,-621,-600,-137,434,453,13,207,45,253,-410,682,-509,920,-490,-912,-408,477,-257,-746,-628,-180,322,-394,606,906,92,-820,-968,-865,526,-552,-756,87,-670,-669,691,-679,-358,-232,276,-259,-544,283,479,797,579,848,-695,747,120,316,491,-935,-4,-190);
    //     assert_eq!(Solution::three_sum_closest_fast(vector, 6456),  2993);
    // }

    #[test]
    fn test4() {
        let vector = vec!(
13,252,-87,-431,-148,387,-290,572,-311,-721,222,673,538,919,483,-128,-518,7,-36,-840,233,-184,-541,522,-162,127,-935,-397,761,903,-217,543,906,-503,-826,-342,599,-726,960,-235,436,-91,-511,-793,-658,-143,-524,-609,-728,-734,273,-19,-10,630,-294,-453,149,-581,-405,984,154,-968,623,-631,384,-825,308,779,-7,617,221,394,151,-282,472,332,-5,-509,611,-116,113,672,-497,-182,307,-592,925,766,-62,237,-8,789,318,-314,-792,-632,-781,375,939,-304,-149,544,-742,663,484,802,616,501,-269,-458,-763,-950,-390,-816,683,-219,381,478,-129,602,-931,128,502,508,-565,-243,-695,-943,-987,-692,346,-13,-225,-740,-441,-112,658,855,-531,542,839,795,-664,404,-844,-164,-709,167,953,-941,-848,211,-75,792,-208,569,-647,-714,-76,-603,-852,-665,-897,-627,123,-177,-35,-519,-241,-711,-74,420,-2,-101,715,708,256,-307,466,-602,-636,990,857,70,590,-4,610,-151,196,-981,385,-689,-617,827,360,-959,-289,620,933,-522,597,-667,-882,524,181,-854,275,-600,453,-942,134);
        assert_eq!(Solution::three_sum_closest_fast(vector, -2805),  -2805);
    }
}
